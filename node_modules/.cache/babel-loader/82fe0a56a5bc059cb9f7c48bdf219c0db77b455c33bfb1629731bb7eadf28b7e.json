{"ast":null,"code":"var _jsxFileName = \"/Users/yunjoohoon/Desktop/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'}\n    // throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status: 500});\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n    // const res = new Response('any data', {status: 201});\n  }\n}\nexport function loader() {\n  // loader는 컴포넌트 실행 전 실행된다.\n  return defer({\n    events: loadEvents()\n  });\n}\n;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadedEvents","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/yunjoohoon/Desktop/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\n\nfunction EventsPage() {\n\n  const {events} = useLoaderData();\n  \n  return (\n  <Suspense>\n    <Await resolve={events}>\n      {(loadedEvents) => <EventsList events={loadEvents}/>}\n    </Await>\n  </Suspense>\n  )\n  \n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n      if (!response.ok) {\n        // return {isError: true, message: 'Could not fetch events'}\n        // throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status: 500});\n        return json({message: 'Could not fetch events.'},\n                {status: 500}\n        );\n      } else {\n        return response;\n        // const res = new Response('any data', {status: 201});\n      }\n}\n\nexport function loader() { // loader는 컴포넌트 실행 전 실행된다.\n  return defer({\n    events: loadEvents()\n  })\n  \n};"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAM;IAACC;EAAM,CAAC,GAAGP,aAAa,CAAC,CAAC;EAEhC,oBACAI,OAAA,CAACF,QAAQ;IAAAM,QAAA,eACPJ,OAAA,CAACP,KAAK;MAACY,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACnBE,YAAY,iBAAKN,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAGb;AAACT,EAAA,CAZQD,UAAU;EAAA,QAEAL,aAAa;AAAA;AAAAgB,EAAA,GAFvBX,UAAU;AAcnB,eAAeA,UAAU;AAEzB,eAAeM,UAAUA,CAAA,EAAG;EAC1B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAExD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,OAAOpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAAyB,CAAC,EACxC;MAACC,MAAM,EAAE;IAAG,CACpB,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;IACf;EACF;AACN;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EAAE;EACzB,OAAOxB,KAAK,CAAC;IACXS,MAAM,EAAEI,UAAU,CAAC;EACrB,CAAC,CAAC;AAEJ;AAAC;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}